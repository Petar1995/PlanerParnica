// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlanerParnicaV2.DbContext;

namespace PlanerParnicaV2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200423014539_LokacijaEdit")]
    partial class LokacijaEdit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Kontakt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Ime");

                    b.Property<int?>("PripadnostKompanijiId");

                    b.Property<string>("Telefon1");

                    b.Property<string>("Telefon2");

                    b.Property<string>("Zanimanje");

                    b.HasKey("Id");

                    b.HasIndex("PripadnostKompanijiId");

                    b.ToTable("Kontakti");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Kontakt");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Lokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naslov");

                    b.HasKey("Id");

                    b.ToTable("Lokacije");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Parnica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojSudnice");

                    b.Property<string>("IdentifikatorPostupka");

                    b.Property<int?>("LokacijaOdrzavanjaId");

                    b.Property<string>("Napomena");

                    b.Property<int?>("SudijaId");

                    b.Property<int?>("TipPostupkaId");

                    b.Property<string>("TipUstanove");

                    b.Property<int?>("TuzeniId");

                    b.Property<int?>("TuzilacId");

                    b.Property<DateTime>("VremeOdrzavanja");

                    b.HasKey("Id");

                    b.HasIndex("LokacijaOdrzavanjaId");

                    b.HasIndex("SudijaId");

                    b.HasIndex("TipPostupkaId");

                    b.HasIndex("TuzeniId");

                    b.HasIndex("TuzilacId");

                    b.ToTable("Parnice");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.TipPostupka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naslov");

                    b.HasKey("Id");

                    b.ToTable("TipoviPostupaka");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Korisnik", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Ime");

                    b.Property<int?>("ParnicaId");

                    b.Property<string>("Prezime");

                    b.HasIndex("ParnicaId");

                    b.ToTable("Korisnik");

                    b.HasDiscriminator().HasValue("Korisnik");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Kompanija", b =>
                {
                    b.HasBaseType("PlanerParnicaV2.Models.Kontakt");

                    b.Property<string>("Adresa");

                    b.Property<string>("Naziv");

                    b.ToTable("Kompanija");

                    b.HasDiscriminator().HasValue("Kompanija");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Kontakt", b =>
                {
                    b.HasOne("PlanerParnicaV2.Models.Kompanija", "PripadnostKompaniji")
                        .WithMany()
                        .HasForeignKey("PripadnostKompanijiId");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Parnica", b =>
                {
                    b.HasOne("PlanerParnicaV2.Models.Lokacija", "LokacijaOdrzavanja")
                        .WithMany()
                        .HasForeignKey("LokacijaOdrzavanjaId");

                    b.HasOne("PlanerParnicaV2.Models.Kontakt", "Sudija")
                        .WithMany()
                        .HasForeignKey("SudijaId");

                    b.HasOne("PlanerParnicaV2.Models.TipPostupka", "TipPostupka")
                        .WithMany()
                        .HasForeignKey("TipPostupkaId");

                    b.HasOne("PlanerParnicaV2.Models.Kontakt", "Tuzeni")
                        .WithMany()
                        .HasForeignKey("TuzeniId");

                    b.HasOne("PlanerParnicaV2.Models.Kontakt", "Tuzilac")
                        .WithMany()
                        .HasForeignKey("TuzilacId");
                });

            modelBuilder.Entity("PlanerParnicaV2.Models.Korisnik", b =>
                {
                    b.HasOne("PlanerParnicaV2.Models.Parnica")
                        .WithMany("Advokati")
                        .HasForeignKey("ParnicaId");
                });
#pragma warning restore 612, 618
        }
    }
}
